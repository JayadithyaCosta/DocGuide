name: PR Checks

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test-and-update-linear:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Run your tests (example with pytest)
      - name: Run Tests
        run: |
          echo "Running tests..."
          # pytest tests/
        continue-on-error: true
        id: tests

      - name: Update Linear Status
        if: always() # Always run, even if tests fail
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          TEST_RESULT: ${{ steps.tests.outcome }}
        run: |
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq

          # Extract Linear Issue ID from PR title (e.g., "[ALPHA-15] Fix bug")
          ISSUE_IDENTIFIER=$(echo "$PR_TITLE" | grep -oP '(?<=\[)[A-Z]+-\d+(?=\])' || true)

          if [ -z "$ISSUE_IDENTIFIER" ]; then
            echo "No Linear issue identifier found in PR title"
            exit 0
          fi

          echo "Found Linear issue identifier: $ISSUE_IDENTIFIER"

          # Query for the issue using the identifier
          ISSUE_QUERY=$(curl --silent --request POST \
            --url https://api.linear.app/graphql \
            --header "Authorization: Bearer $LINEAR_API_KEY" \
            --header "Content-Type: application/json" \
            --data "{
              \"query\": \"query { issues(filter: {identifier: {eq: \\\"$ISSUE_IDENTIFIER\\\"}}) { nodes { id team { states { id name } } } } }\"
            }")

          # Extract the actual issue ID and team states
          ISSUE_ID=$(echo "$ISSUE_QUERY" | jq -r '.data.issues.nodes[0].id')

          if [ -z "$ISSUE_ID" ] || [ "$ISSUE_ID" == "null" ]; then
            echo "Could not find issue with identifier $ISSUE_IDENTIFIER"
            exit 1
          fi

          echo "Found actual issue ID: $ISSUE_ID"

          # Get the team states
          TEAM_STATES=$(echo "$ISSUE_QUERY" | jq -r '.data.issues.nodes[0].team.states')

          # Determine state ID based on test result
          if [ "$TEST_RESULT" == "success" ]; then
            echo "Tests passed, setting issue to Done state"
            STATE_ID=$(echo "$TEAM_STATES" | jq -r '.[] | select(.name=="Done") | .id')
          else
            echo "Tests failed, setting issue to In Progress state"
            STATE_ID=$(echo "$TEAM_STATES" | jq -r '.[] | select(.name=="In Progress") | .id')
          fi

          if [ -z "$STATE_ID" ] || [ "$STATE_ID" == "null" ]; then
            echo "Could not find appropriate state ID"
            exit 1
          fi

          echo "Using state ID: $STATE_ID"

          # Update Linear issue state
          UPDATE_RESULT=$(curl --silent --request POST \
            --url https://api.linear.app/graphql \
            --header "Authorization: Bearer $LINEAR_API_KEY" \
            --header "Content-Type: application/json" \
            --data "{
              \"query\": \"mutation { issueUpdate(id: \\\"$ISSUE_ID\\\", input: { stateId: \\\"$STATE_ID\\\" }) { success } }\"
            }")

          echo "Update result: $UPDATE_RESULT"

name: PR Checks

on:
  pull_request:
    types: [opened, synchronize]
  pull_request_review:
    types: [submitted]

jobs:
  test-and-update-linear:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Run your tests (example with pytest)
      - name: Run Tests
        run: |
          echo "Running tests..."
          # pytest tests/
        continue-on-error: true
        id: tests

      - name: Update Linear Status
        if: always() # Always run, even if tests fail
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          TEST_RESULT: ${{ steps.tests.outcome }}
          PR_STATE: ${{ github.event.pull_request.merged == true && 'merged' || 'open' }}
          REVIEW_STATE: ${{ github.event.review.state || '' }}
        run: |
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq

          # Debug: Check if we can access Linear API at all
          echo "Checking Linear API access..."
          USER_INFO=$(curl --silent --request POST \
            --url https://api.linear.app/graphql \
            --header "Authorization: Bearer $LINEAR_API_KEY" \
            --header "Content-Type: application/json" \
            --data '{"query": "query { viewer { id name } }"}')
          
          echo "User info: $USER_INFO"
          
          # Debug: List all issues to see what's available
          echo "Listing recent issues..."
          ALL_ISSUES=$(curl --silent --request POST \
            --url https://api.linear.app/graphql \
            --header "Authorization: Bearer $LINEAR_API_KEY" \
            --header "Content-Type: application/json" \
            --data '{"query": "query { issues(first: 10) { nodes { id identifier title } } }"}')
          
          echo "Recent issues: $ALL_ISSUES"

          # Extract Linear Issue ID from PR title (e.g., "[ALPHA-15] Fix bug")
          ISSUE_IDENTIFIER=$(echo "$PR_TITLE" | grep -oP '(?<=\[)[A-Z]+-\d+(?=\])' || true)

          if [ -z "$ISSUE_IDENTIFIER" ]; then
            echo "No Linear issue identifier found in PR title"
            exit 0
          fi

          echo "Found Linear issue identifier: $ISSUE_IDENTIFIER"

          # Try different approaches to find the issue
          
          # Approach 1: Direct query by identifier
          echo "Approach 1: Direct query by identifier"
          QUERY1=$(curl --silent --request POST \
            --url https://api.linear.app/graphql \
            --header "Authorization: Bearer $LINEAR_API_KEY" \
            --header "Content-Type: application/json" \
            --data "{
              \"query\": \"query { issues(filter: {identifier: {eq: \\\"$ISSUE_IDENTIFIER\\\"}}) { nodes { id identifier title team { states { id name } } } } }\"
            }")
          
          echo "Query 1 result: $QUERY1"
          
          # Approach 2: Case-insensitive query
          echo "Approach 2: Case-insensitive query"
          QUERY2=$(curl --silent --request POST \
            --url https://api.linear.app/graphql \
            --header "Authorization: Bearer $LINEAR_API_KEY" \
            --header "Content-Type: application/json" \
            --data "{
              \"query\": \"query { issues(filter: {identifier: {eqIgnoreCase: \\\"$ISSUE_IDENTIFIER\\\"}}) { nodes { id identifier title team { states { id name } } } } }\"
            }")
          
          echo "Query 2 result: $QUERY2"
          
          # Approach 3: Search by title containing the identifier
          echo "Approach 3: Search by title"
          QUERY3=$(curl --silent --request POST \
            --url https://api.linear.app/graphql \
            --header "Authorization: Bearer $LINEAR_API_KEY" \
            --header "Content-Type: application/json" \
            --data "{
              \"query\": \"query { issues(filter: {title: {contains: \\\"$ISSUE_IDENTIFIER\\\"}}) { nodes { id identifier title team { states { id name } } } } }\"
            }")
          
          echo "Query 3 result: $QUERY3"
          
          # Try to use the results from any of the approaches
          ISSUE_ID=""
          TEAM_STATES=""
          
          # Try approach 1
          ISSUE_ID=$(echo "$QUERY1" | jq -r '.data.issues.nodes[0].id')
          if [ -n "$ISSUE_ID" ] && [ "$ISSUE_ID" != "null" ]; then
            echo "Found issue ID from approach 1: $ISSUE_ID"
            TEAM_STATES=$(echo "$QUERY1" | jq -r '.data.issues.nodes[0].team.states')
          else
            # Try approach 2
            ISSUE_ID=$(echo "$QUERY2" | jq -r '.data.issues.nodes[0].id')
            if [ -n "$ISSUE_ID" ] && [ "$ISSUE_ID" != "null" ]; then
              echo "Found issue ID from approach 2: $ISSUE_ID"
              TEAM_STATES=$(echo "$QUERY2" | jq -r '.data.issues.nodes[0].team.states')
            else
              # Try approach 3
              ISSUE_ID=$(echo "$QUERY3" | jq -r '.data.issues.nodes[0].id')
              if [ -n "$ISSUE_ID" ] && [ "$ISSUE_ID" != "null" ]; then
                echo "Found issue ID from approach 3: $ISSUE_ID"
                TEAM_STATES=$(echo "$QUERY3" | jq -r '.data.issues.nodes[0].team.states')
              else
                echo "Could not find issue with identifier $ISSUE_IDENTIFIER using any approach"
                exit 0  # Exit with success to avoid failing the workflow
              fi
            fi
          fi
          
          echo "Found actual issue ID: $ISSUE_ID"
          
          # List all available states
          echo "Available states:"
          echo "$TEAM_STATES" | jq -r '.[] | .name + ": " + .id'
          
          # Determine state ID based on PR and test status
          if [ "$PR_STATE" == "merged" ]; then
            echo "PR was merged, setting issue to Done state"
            TARGET_STATE="Done"
          elif [ "$REVIEW_STATE" == "approved" ]; then
            echo "PR was approved, setting issue to Ready for Merge state"
            TARGET_STATE="Ready for Merge"
          elif [ "$TEST_RESULT" == "success" ]; then
            echo "Tests passed, setting issue to In Review state"
            TARGET_STATE="In Review"
          else
            echo "Tests failed or PR is open, setting issue to In Progress state"
            TARGET_STATE="In Progress"
          fi
          
          echo "Target state: $TARGET_STATE"
          
          # Find the state ID for the target state
          STATE_ID=$(echo "$TEAM_STATES" | jq -r ".[] | select(.name==\"$TARGET_STATE\") | .id")
          
          if [ -z "$STATE_ID" ] || [ "$STATE_ID" == "null" ]; then
            echo "Could not find state ID for $TARGET_STATE"
            # Fallback to In Progress if the target state doesn't exist
            echo "Falling back to In Progress state"
            STATE_ID=$(echo "$TEAM_STATES" | jq -r '.[] | select(.name=="In Progress") | .id')
            
            if [ -z "$STATE_ID" ] || [ "$STATE_ID" == "null" ]; then
              echo "Could not find In Progress state ID either"
              # Try to find any state ID
              STATE_ID=$(echo "$TEAM_STATES" | jq -r '.[0].id')
              
              if [ -z "$STATE_ID" ] || [ "$STATE_ID" == "null" ]; then
                echo "Could not find any state ID"
                exit 0
              else
                echo "Using first available state ID: $STATE_ID"
              fi
            }
          fi
          
          echo "Using state ID: $STATE_ID"
          
          # Update Linear issue state
          UPDATE_RESULT=$(curl --silent --request POST \
            --url https://api.linear.app/graphql \
            --header "Authorization: Bearer $LINEAR_API_KEY" \
            --header "Content-Type: application/json" \
            --data "{
              \"query\": \"mutation { issueUpdate(id: \\\"$ISSUE_ID\\\", input: { stateId: \\\"$STATE_ID\\\" }) { success } }\"
            }")
          
          echo "Update result: $UPDATE_RESULT"
